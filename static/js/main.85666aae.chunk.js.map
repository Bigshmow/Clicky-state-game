{"version":3,"sources":["components/Navbar/Navbar.js","components/Wrapper/Wrapper.js","components/Charcard/Charcard.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","points","score","alt","href","Wrapper","children","Charcard","setBack","setState","clicked","handleClick","state","this","onClick","handlePoints","name","src","image","Component","App","bobs","console","log","shuffledBobs","array","i","length","j","Math","floor","random","temp","shuffleArray","map","character","id","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"q0EAkBeA,MAdf,SAAiBC,GACb,OACA,yBAAKC,UAAU,4CACX,0BAAMA,UAAU,qBAAoB,2CACpC,8BAAM,wBAAIA,UAAU,eAAd,kBAA4CD,EAAME,OAAlD,kBAAyEF,EAAMG,QACrF,wBAAIF,UAAU,eACd,uBAAGG,IAAI,WAAWC,KAAK,sDAAsDJ,UAAU,mBADvF,IAGA,uBAAGG,IAAI,SAASC,KAAK,8BAA8BJ,UAAU,oB,MCOtDK,MAhBf,SAAiBN,GACb,OACI,6BACA,yBAAKC,UAAU,aACX,wBAAIA,UAAU,eAAd,8BACA,wBAAIA,UAAU,eAAd,qFAEA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,oBACdD,EAAMO,aCsBRC,G,kBA3BX,WAAYR,GAAQ,IAAD,8BACf,4CAAMA,KAQVS,QAAU,WACN,EAAKC,SAAS,CAACC,SAAS,KAVT,EAanBC,YAAc,WACT,EAAKC,MAAMF,QAA2C,EAAKD,SAAS,CAACC,SAAS,IAAzD,EAAKD,SAAS,CAACC,SAAS,KAZ9C,EAAKE,MAAQ,CAACF,SAAS,GAFR,E,iFAMfG,KAAKF,gB,+BAWC,IAAD,OAET,OAEI,yBAAKX,UAAU,QAAQc,QAAS,kBAAM,EAAKf,MAAMgB,aAAa,EAAKH,MAAMF,WACjE,yBAAKP,IAAKU,KAAKd,MAAMiB,KAAMC,IAAKJ,KAAKd,MAAMmB,MAAOlB,UAAU,sBAAsBc,QAASD,KAAKF,mB,GAxBzFQ,c,iBC2DRC,E,2MA5CbR,MAAQ,CACNS,KAAKA,EACLpB,OAAQ,G,EAOVc,aAAe,SAACL,GACdY,QAAQC,IAAI,iCAAmCb,GAC3CA,GACF,EAAKD,SAAS,CAACR,OAAQ,EAAKW,MAAMX,OAAQ,IAEvCS,IACH,EAAKD,SAAS,CAACR,OAAQ,IACvB,EAAKC,MAAQ,EAAKU,MAAMX,S,mFAV1BY,KAAKE,iB,+BAcG,IAAD,OACDS,EAlCV,SAAsBC,GAEpB,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,EA0BgBQ,CAAapB,KAAKD,MAAMS,MAC7C,OACE,6BACA,kBAAC,EAAD,CACApB,OAAQY,KAAKD,MAAMX,OACnBC,MAAOW,KAAKX,QAEd,kBAAC,EAAD,KACCsB,EAAaU,KAAI,SAAAC,GAAS,OACvB,kBAAC,EAAD,CACAC,GAAID,EAAUC,GACdC,IAAKF,EAAUC,GACfpB,KAAMmB,EAAUnB,KAChBE,MAAOiB,EAAUjB,MACjBH,aAAc,EAAKA,wB,GArCTI,aCNEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.85666aae.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/anchor-has-content */\r\nimport React from 'react';\r\nimport './Style.css';\r\n\r\nfunction Navbar (props) {\r\n    return(\r\n    <nav className=\"navbar sticky-top navbar-dark bg-primary\">\r\n        <span className=\"navbar-brand mb-0\"><h1>ClickyGame</h1></span>\r\n        <span><h1 className=\"socialMedia\">Score counter: {props.points} | High Score: {props.score}</h1></span>\r\n        <h1 className=\"socialMedia\">\r\n        <a alt=\"linkedin\" href=\"https://www.linkedin.com/in/devin-stewart-7697bb9b/\" className=\"fa fa-linkedin\"></a> \r\n        |\r\n        <a alt=\"github\" href=\"https://github.com/Bigshmow\" className=\"fa fa-github\"></a>\r\n        </h1>\r\n    </nav>\r\n)\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './Style.css';\r\n\r\nfunction Wrapper(props) {\r\n    return (\r\n        <div>\r\n        <div className=\"jumbotron\">\r\n            <h1 className=\"text-center\">Start by clicking images: </h1>\r\n            <h3 className=\"text-center\">Each image clicked earns you a point.  Clicking a duplicate image ends the game!</h3>\r\n        </div>\r\n            <div className=\"container\">\r\n                <div className=\"row imagesWithin\">\r\n                {props.children}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import React , { Component } from 'react';\r\nimport \"./Style.css\";\r\n\r\n\r\n\r\nclass Charcard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {clicked: false};\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.handleClick()\r\n    }\r\n\r\n    setBack = () => {\r\n        this.setState({clicked: false});\r\n    }\r\n    \r\n    handleClick = () => {\r\n        !this.state.clicked ? this.setState({clicked: true}) : this.setState({clicked: false});\r\n    }\r\n\r\n    render() {\r\n\r\n    return (\r\n\r\n        <div className=\"col-3\" onClick={() => this.props.handlePoints(this.state.clicked)}>\r\n                <img alt={this.props.name} src={this.props.image} className=\"img-thumbnail image\" onClick={this.handleClick}/>\r\n        </div>\r\n    )\r\n}\r\n}\r\nexport default Charcard","import React, { Component } from \"react\";\nimport Navbar from './components/Navbar/Navbar';\nimport Wrapper from './components/Wrapper/Wrapper';\nimport Charcard from './components/Charcard/Charcard';\nimport bobs from \"./bobs.json\";\nimport './App.css';\n\nfunction shuffleArray(array) {\n  let i = array.length - 1;\n  for (; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n}\n\nclass App extends Component {\n\n  state = {\n    bobs:bobs,\n    points: 0\n  };\n\n  componentDidMount () {\n    this.handlePoints();\n  }\n  \n  handlePoints = (clicked) => {\n    console.log(\"This logged from handlePoints:\" , clicked)\n    if (clicked) {\n      this.setState({points: this.state.points +1})\n    }\n    if (!clicked) {\n      this.setState({points: 0})\n      this.score = this.state.points\n    }\n  }\n  \n  render() {\n    const shuffledBobs = shuffleArray(this.state.bobs);\n    return (\n      <div>\n      <Navbar\n      points={this.state.points}\n      score={this.score}\n      />\n    <Wrapper>    \n    {shuffledBobs.map(character => (\n        <Charcard \n        id={character.id}\n        key={character.id}\n        name={character.name}\n        image={character.image}\n        handlePoints={this.handlePoints}\n        />\n      ))}\n    </Wrapper>\n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}